#Logging Level (Troubleshooting)
#LogLevel DEBUG

# Set SERVICEGATEWAY to IP address of your Service Gateway hosting the Third-Party Log Collection Service
define SERVICEGATEWAY 127.0.0.1
define PORT 6514

# Set ROOT to the folder your nxlog install path
define ROOT C:\Program Files\nxlog
define ROOT_STRING C:\Program Files\nxlog
#define ROOT C:\Program Files (x86)\nxlog
#define ROOT_STRING C:\Program Files (x86)\nxlog

# Define certificates if used
define CERTDIR %ROOT%\cert
define CONFDIR  %ROOT%\\conf

# Define internal log details for NXLog
define LOGDIR   %ROOT%\data
define LOGFILE  %LOGDIR%\nxlog.log 
 
Moduledir %ROOT%\modules
CacheDir %ROOT%\data
Pidfile %ROOT%\data\nxlog.pid
SpoolDir %ROOT%\data
#LogFile %ROOT%\data\nxlog.log
LogFile %LOGFILE%

<Extension _fileop>
    Module xm_fileop
    # Check the size of our log file hourly, rotate if larger than 5MB
    <Schedule>
        Every   1 hour
        Exec    if (file_exists('%LOGFILE%') and \
                   (file_size('%LOGFILE%') >= 5M)) \
                    file_cycle('%LOGFILE%', 8);
    </Schedule>
    # Rotate our log file every week on Sunday at midnight
    <Schedule>
        When    @weekly
        Exec    if file_exists('%LOGFILE%') file_cycle('%LOGFILE%', 8);
    </Schedule>
</Extension>
 
<Extension json>
    Module xm_json
</Extension>
 
<Extension syslog>
    Module xm_syslog
</Extension>

<Extension File operations>
    Module xm_fileop 
</Extension>

#Internal NXLog Logs
<Input siem_internal>
    Module im_internal
    # Drop if a log file is not found, likely IIS or FW are not configured
    Exec if ($Message =~ /does not exist/) drop();
    # Drop if IIS or old Windows logs are not found
    Exec if ($Message =~ /failed to subscribe to msvistalog/) drop();
    Exec  $Message = to_json(); 
</Input>
<Output siem_out_internal>
    Module om_tcp
    Host %SERVICEGATEWAY%
    Port %PORT%
    Exec to_syslog_bsd();
</Output>
<Route route_internal>
    Path siem_internal => siem_out_internal
</Route>

#Windows Base Event Logs
<Input bsiem_eventlog>
    Module im_msvistalog
    # Ignore logging nxlog.exe connections
    Exec if ($SourceName == 'Microsoft-Windows-Security-Auditing' and $EventID IN (5156, 5157) and $Application =~ /\\nxlog\.exe$/i) drop();
    # Define Queries
    Query       <QueryList>\
                        <Query Id="0">\
                            <Select Path="Application">*</Select>\
                            <Select Path="System">*</Select>\
                            <Select Path="Security">*</Select>\
                            <Select Path="Setup">*</Select>\
                            <Select Path="Windows PowerShell">*</Select>\
                            <Suppress Path="Security">*[System[(EventID=4689 or EventID=5158 or EventID=5440 or EventID=5444)]]</Suppress> \
                            <Suppress Path="Windows PowerShell">*[System[(EventID=501 or EventID=400 or EventID=600)]]</Suppress> \
                        </Query>\
                    </QueryList> 
    
    Exec if ($Application =~ /nxlog\\nxlog.exe/) drop(); 
    Exec if ($SourceAddress =~ /224.0.0.252/) drop();
    Exec if ($SourceAddress =~ /192.168.1.255/) drop();
    Exec if ($SourceAddress =~ /224.0.0.1/) drop();
    Exec if ($SourceAddress =~ /239.255.255.250/) drop();
    Exec if ($DestAddress =~ /224.0.0.22/) drop();  
    Exec if ($CommandLine =~ /"C:\\Program Files\\nxlog\\nxlog.exe" -c "C:\\Program Files\\nxlog\\conf\\nxlog.conf"/) drop();
    Exec if ($EventID == 4202 or $EventID == 4208 or $EventID == 4302 or $EventID == 4304 or $EventID == 5004) drop();\
    Exec $EventTime = integer($EventTime);
    Exec $Message = to_json();
</Input>
<Output siem_out_eventlog>
    Module om_tcp
    Host %SERVICEGATEWAY%
    Port %PORT%
    Exec to_syslog_bsd();
</Output>
<Route route_eventlog>
    Path siem_eventlog => siem_out_eventlog
</Route>

#Additional Windows Event Logs
<Input siem_eventlog_sup>
    Module im_msvistalog

    Exec if ($SourceName == 'Microsoft-Windows-Security-Auditing' and $EventID IN (5156, 5157) and $Application =~ /\\nxlog\.exe$/i) drop();
    # Define Queries
    Query       <QueryList>\
                        <Query Id="0">\
                            <Select Path="Microsoft-Windows-AppLocker/EXE and DLL">*</Select>\
                            <Select Path="Microsoft-Windows-AppLocker/MSI and Script">*</Select>\
                            <Select Path="Microsoft-Windows-AppLocker/Packaged app-Deployment">*</Select>\
                            <Select Path="Microsoft-Windows-AppLocker/Packaged app-Execution">*</Select>\
                            <Select Path="Microsoft-Windows-LSA/Operational">*</Select>\
                            <Select Path="Microsoft-Windows-NTLM/Operational">*</Select>\
                            <Select Path="Microsoft-Windows-PowerShell/Admin">*</Select>\
                            <Select Path="Microsoft-Windows-Powershell/Operational">*</Select>\
                            <Select Path="Microsoft-Windows-PrintService/Admin">*</Select>\
                            <Select Path="Microsoft-Windows-PrintService/Operational">*</Select>\
                            <Select Path="Microsoft-Windows-TaskScheduler/Operational">*</Select>\
                        </Query>\
                    </QueryList> 
    
    Exec if ($Application =~ /nxlog\\nxlog.exe/) drop();
    Exec if ($SourceAddress =~ /224.0.0.252/) drop();
    Exec if ($SourceAddress =~ /192.168.1.255/) drop();
    Exec if ($SourceAddress =~ /224.0.0.1/) drop();
    Exec if ($SourceAddress =~ /239.255.255.250/) drop();
    Exec if ($DestAddress =~ /224.0.0.22/) drop();    
    Exec if ($CommandLine =~ /"C:\\Program Files\\nxlog\\nxlog.exe" -c "C:\\Program Files\\nxlog\\conf\\nxlog.conf"/) drop();
    Exec if ($EventID == 4202 or $EventID == 4208 or $EventID == 4302 or $EventID == 4304 or $EventID == 5004) drop();\
    
    # Workaround for local time so as to standardize to absolute microseconds since epoch
    Exec $EventTime = integer($EventTime);
    # JSON is required because some Windows logs contain new-line characters.
    Exec $Message = to_json();
</Input>
<Output siem_out_eventlog_sup>
    Module om_tcp
    Host %SERVICEGATEWAY%
    Port %PORT%
    Exec to_syslog_bsd();
</Output>
<Route route_eventlog_sup>
    Path siem_eventlog_sup => siem_out_eventlog_sup
</Route>



#Sysmon Event Logs
<Input siem_eventlog_sysmon>
    Module im_msvistalog
    Query       <QueryList>\
                        <Query Id="0">\
                            <Select Path="Microsoft-Windows-Sysmon/Operational">*</Select>\
                        </Query>\
                    </QueryList> 
           
   
    Exec $EventTime = integer($EventTime);

    Exec $Message = to_json();
</Input>
<Output siem_out_eventlog_sysmon>
    Module om_tcp
    Host %SERVICEGATEWAY%
    Port %PORT%
    Exec to_syslog_bsd();
</Output>
<Route route_eventlog_sysmon>
    Path siem_eventlog_sysmon => siem_out_eventlog_sysmon
</Route>
